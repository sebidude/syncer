name: Build and Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build and pack App
        run: |
          make build-linux tarball
        id: build

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: New Release
          draft: false
          prerelease: false
      

      # - name: build RPM package
      #   id: rpm_build
      #   uses: naveenrajm7/rpmbuild@master
      #   with:
      #       spec_file: "syncer.spec"
          
      # - name: Upload RPM Release Asset
      #   id: upload-rpm-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #       upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #       asset_path: ${{ steps.rpm_build.outputs.source_rpm_path }}
      #       asset_name: ${{ steps.rpm_build.outputs.source_rpm_name }}
      #       asset_content_type: ${{ steps.rpm_build.outputs.rpm_content_type }}
            
      - name: Upload Release Tarball Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/linux/syncer-${{ steps.get_version.outputs.VERSION }}.linux-amd64.tar.gz
          asset_name: syncer-${{ steps.get_version.outputs.VERSION }}.linux-amd64.tar.gz
          asset_content_type: application/tar+gzip
      
      - name: Upload Release Checksumm Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/linux/syncer-${{ steps.get_version.outputs.VERSION }}.linux-amd64.tar.gz.sha256
          asset_name: syncer-${{ steps.get_version.outputs.VERSION }}.linux-amd64.tar.gz.sha256
          asset_content_type: application/tar+gzip